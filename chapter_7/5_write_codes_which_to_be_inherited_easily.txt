継承の階層構造、モジュールの利用性・メンテナンス性は、コードの質を決める。

アンチパターン①
オブジェクトがtypeやcategoryという変数名を使い、どんなメッセージをselfに送るか決めている。
型の異なるオブジェクトが含まれている。新たな型を追加するたびに、コードも変更しないといけない。
→共通のコードは抽象スーパークラスに置き、サブクラスを使って異なる型を作る。
　→サブクラスが、既存のコードを変えずに階層構造を拡張してくれる

アンチパターン②
メッセージを受け取るオブジェクトのクラスを確認してから、どのメッセージを送るか決めている
→ダックタイプを見落としている。
　→ダックタイプがインターフェースだけでなく振る舞いまで共有する場合は、モジュールにおいてインクルードする

