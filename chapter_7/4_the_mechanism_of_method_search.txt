①ざっくりとした説明
オブジェクトはメッセージを受け取ると、「クラス」を見に行って合致するメソッドを探す。
見つからなけばスーパークラスに遡って探す。一番上のスーパークラスまでこれを繰り返す。

②より正確な説明
モジュールがインクルードされている場合。
モジュール内のメソッドはすべて、インクルード先のオブジェクトが応答できるメッセージsに含まれる。
メソッド探索の順番で行くと、theオブジェクトの上にtheモジュールが追加される。
だから、クラスの継承と同じようにオーバーライドできる。
つまり、継承関係は変わらないが、メソッド探索の順番は変わる。
・theオブジェクトでtheモジュールのaメソッドを上書きした後にtheモジュールからtheメソッドを呼び出すと、
　振る舞いが違うことがある。

③ほぼ完全な説明
・１つのクラスに複数のモジュールをインクルードした場合、メソッド探索パスはどうなるか？
　→インクルードの逆順、つまり、最後にインクルードしたモジュールから順番に探索していく。
・includeは、「クラス」にモジュールを共有する仕組み。theインスタンスsはすべてtheモジュールの振る舞いsを共有する
・extendは、モジュールの振る舞いをオブジェクトに直接追加する。
　クラスをモジュールで拡張（extend）すると、"theクラス"にクラスメソッドのみ追加される
　インスタンスをextendすると、"theインスタンス"にインスタンスメソッドのみ追加される
　 →クラスも単なるオブジェクトに過ぎず、extendの振る舞いはすべてのオブジェクトで共通している

adhoc：
made or happening only for a particular purpose or need, not planned before it happens
