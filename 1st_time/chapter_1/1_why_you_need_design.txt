世界 - 手続き的：       　出来事が順に起こり、過ぎ去っていく
    - オブジェクト指向的： 物や人の振る舞いの連鎖反応

発想の転換が必要。
システムを手続きの集まりとして捉えるのではなく、
オブジェクト間で受け渡されるメッセージの連続

コーディングの楽しさと生産性は一致する。
一致させるのが「オブジェクト指向設計」

変化は常に起こる　-> 設計 -> 変更をしやすくなる -> コーディングが楽しくなる
　                 ×   -> 変更にコストがかかる -> 苦痛

なぜ変更が困難になるのか？
 -> オブジェクト間の依存があるから。
依存：メッセージ（保持しているオブジェクトのメソッドを実行させること）の送り手が、受け手を知っていること

メッセージを送る以上、ある程度の依存は必要
オブジェクト指向設計：オブジェクトが変更しやすい形で依存関係を管理すること

設計とは芸術である
作業員が同じ仕事をする組み立てラインではない
芸術家たちが一つの作品を作り上げるアトリエ

設計では、常に２つのことを考える
「今」必要な機能を書く
「未来」の変更を受け入れられるように書く

設計：後にでも構成を変えられるようにしておくこと

原則とパターンは、木工道具。
適切に使う人（設計者）がいて初めて、質の高い家具（アプリケーション）が出来上がる

設計をしなくても動くものは作れる
 -> 時間が経つにつれて変更できなくなっていく。
「はい、その機能は追加できますが、『すべてが壊れます』」

ある程度経験を積むと、設計しすぎる罠にかかる。良かれと思って原則やパターンを当てはめた後、閉じ込められている事に気づく
「いえ、その機能の追加はできません。『それをするための設計はしていません』」

設計とは漸進的なプロセスのこと。フィードバックの繰り返しによって進んでいく。
早すぎる段階で設計すると、未来から見れば間違った理解がコードに埋め込まれる。
その結果、設計と実装が乖離する。この乖離が起きた時にオブジェクト指向ソフトウェアは失敗する

「設計」：すべての機能の、想定される未来の内部動作をすべて特定し、完全に文書化する
　     ：変更が簡単になるように、コードの構成を考える　　　<- こっち！

良い設計は、設計者の、理論を実践に変換する能力にかかっている！