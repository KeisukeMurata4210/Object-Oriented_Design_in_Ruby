インターフェースの明確さは、設計スキルと日々の成長度合いをあらわにする。

★インターフェースを作るための経験則
設計者の目的は、いまの役割を果たし、かんたんに再利用でき、将来的な予期せぬ用途にも対応できるコードを書くこと。
 -> 依存できるものを伝えるのは設計者の責任。
　   -> 毎回インターフェースを宣言する。

＜明示的なインターフェースを作る＞
「パブリック」インターフェースとなるメソッドは、このようであるべき
・明示的にパブリックインターフェースだと特定できる
・「どのように」よりも「何を」になっている　<- 例えば、戻り値を表す名前が付いている
・名前は、考えられる限り、変わり得ないものである
・オプション引数として、ハッシュをとる

public/protected/private　は異なる２つのことを表す
・安定しているか不安定か
・見える範囲
public：安定で、かつどこからでも見られる
private：不安定、クラスからサブクラスからのみ。
protected：不安定、クラスからサブクラスからのみ。　-> 違いはまた今度にしよう。

privateでもprotectedでも、publicとして再定義できる。　-> アクセス制限はできない。
次の２つのことは伝えらえる。
・「将来の」プログラマーが持つ情報よりも、今の自分の方がより良い情報を持っていると信じている。
・今の自分が不安定だと考えているメソッドを、将来のプログラマーに不用意に使われることは防がなければならないと信じている。

protectedなどのキーワードではなく命名規則やコメントで対応することもある。-> 未来のプログラマーを信頼する
なんにしろ、安定・不安定の情報を伝えることで、未来に対する義務を果たせる。

＜ほかのパブリックインターフェースに敬意を払う＞
ほかのクラスと協力するときは、パブリックインターフェースのみを使ってベストを尽くす。
　<- そのクラスを書いた人も、意図的に、今の自分を助けようとして書いた。必死に情報を伝えようとしている。
　   プライベートインターフェースに依存すると変更を強制されやすくなる

＜プライベートインターフェースに依存するときは注意深く＞
止むを得ず依存するときは、依存オブジェクトの注入、依存の隔離など３章のテクニックを使う

＜コンテキストを最小限にする＞
パブリックインターフェースが他者に要求するコンテキストが最小限になるように。
「どのように」を知ることなく、求めているもの「何」を得られるように作る
パブリックインターフェースを持たないクラスがあっても、↑を諦めない。
ラッパーメソッド、ラッパークラスなどを駆使し、コンテキストを最小にする。