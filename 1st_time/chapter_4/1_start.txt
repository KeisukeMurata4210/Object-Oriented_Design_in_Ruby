依存オブジェクトの注入や単一責任、だけでは解決しない。
クラスが何をするかではなく、何を明らかにするか

「インターフェース」：
①ここでは、クラス「内」にあるインターフェース。　4章ではこっち！
　他のオブジェクトから使われる意図で実装されたメソッドで構成される。

②複数のクラスにまたがり、どの単一クラスからも独立しているもの　　5章で扱うよ。
　インターフェースで要求されるメソッドを実装するクラスは、そのインターフェースのように振る舞える

例）レストランでの注文
　メニューがインターフェース
　お客さんはどの料理を食べたいかだけ知っていればいい。
　料理の作り方や、実際の調理には触れない。　その方が効率がいい。

パブリックインターフェース
・クラスの主要な責任を明らかにする
・外部から実行されることが想定される
・気まぐれに変更されない
・他者がそこに依存しても安全　　　　<- この辺りが設計の技術かも
・テストで完全に文章化されている   <- この発想はなかった

プライベートインターフェース
・実装の詳細に関わる
・他のオブジェクトから送られてくることは想定されていない
・どんな理由でも変更されうる
・他者がそこに依存するのは危険   <- この発想はなかった
・テストでは、言及さえされないこともある

単一責任とは単一の目的のことで、クラスがすること（＝振る舞い＝メソッド）は、その目的を果たすものとなる
！パブリックメソッドは、責任の説明として解釈できるものであるべき

３章「変更されにくいところに依存する」：パブリックメソッドに依存する、ということ

良いパブリックインターフェースは、想定外の変更に対するコストを下げる

実際にコーディングしてみるか！