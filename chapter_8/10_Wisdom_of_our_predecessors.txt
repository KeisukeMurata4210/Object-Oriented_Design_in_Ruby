"継承が最も適しているのは、過去のコードの大部分を使いつつ、新たなコードの追加が比較的少量のときに、既存のクラスに機能を追加する場合です"
"振る舞いが、それを構成するパーツの総和を上回るなら、コンポジションを使いましょう"

＠is-a関係に継承を使う
自転車のサスペンション　ー a社 / b社 / c社

＠behaves-like-aにダックタイプを使う
役割（ロール）の存在を認識する状況
・あるオブジェクトがある役割を担っているが、それはそのオブジェクトの主な責任ではないとき
・同じ役割を、多くのオブジェクト、しかも互いに関係し合わないオブジェクトたち、に担わせる必要があるとき

オブジェクトの視点ではなく、オブジェクトを保持する側の視点で考える。
設計においてすべきことは、
・ダックタイプのインターフェースを定義すること
・その実装を必要とする担い手に提供すること
振る舞いそのものを共有する場合はモジュールを使う

＠has-a関係にコンポジションを使う
自転車は、個々のパーツたちの総和、以上のもの。
パーツが持つ振る舞いは持ちながらも、パーツにはない機能や振る舞いも持つ

is-a / has-a の違いが、継承とコンポジションの使い分けの基準になる。
パーツが多ければ多いほど、コンポジションでモデル化されるべきと言える。

経験が大切かな。抽象度の高いテーマだから、ある程度具体的な経験を経てからじゃないとピンとこないだろう。