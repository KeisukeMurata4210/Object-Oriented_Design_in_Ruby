クラスによる継承：
「コード構成のテクニック」
＝「オブジェクトを階層構造に構成するコストを払う代わりに、メッセージの委譲は無料で手に入れられる」

コンポジションは、そのコストと利点を逆転させたもの。
階層構造に落とし込まず、オブジェクトは独立して存在する。
その代わり、オブジェクトはお互いに知識を持ち、明示的にメッセージを委譲する。

一般的には、コンポジション＞継承
継承の方が良い、とはっきり言えないときはコンポジションにする。
なぜなら、継承が生み出す依存はコンポジションのそれよりはるかに大きいから。


＜継承＞
＠継承の利点
目指すべきコードのあり方
1.見通しが良いこと
2.合理的であること
3.利用性が高いこと
4.模範的であること
継承が正しく使われるなら、2,3,4で優れたコードを作れる

2.合理的であること
階層の上で定義されたメソッドは広範囲で使える。
→広範囲にわたる振る舞いの変更を、ほんの一部分の修正で成し遂げられる

3.利用性が高いこと
継承を使ったコードは「オープン・クローズド（Open-Closed）」=拡張には開いていて、修正には閉じている
サブクラスを作って新しい変種を作る上で、既存コードの変更がいらない

4.模範的であること
抽象クラス、具象クラスのパターンを踏襲してサブクラスを作る。
→階層構造そのものが、拡張するコードを書くためのガイドになる

＠継承のコスト
継承の懸念事項は2つ
1.適さない状況で継承を使ってしまう
　新しい振る舞いを追加すべき時に、その手間が恐ろしくかかってしまう
2.他のプログラマーによって予想外の使い方をされる
　継承によって生まれた依存を、別の人は許容できないかもしれない
★コインの表裏
「合理的」　　　：構造が間違っていた場合、小さな変更が広範囲のコードを壊す
「利用性が高い」：抽象⇄具象の階層構造とは違う型を組み込む時、階層を変える必要がある
「模範的」　　　：不適切にモデル化された階層構造を、初級プログラマーが拡張しようとした場合
　             リファクタリングすべきだが、複製したり依存を増やしたりする

「自分が間違っているとき、何が起こるだろう」という問いかけが大切
継承とはそもそも、深く埋め込まれた依存を集めて使うものだから。
サブクラスは変更不可の形で、スーパークラスに結合されている

書いたコードをどのような人たちが使うか？


＠コンポジションの利点
責任がはっきりしている小さなオブジェクトで構成される
1.見通しが良い
簡単に理解でき、変更が起きた場合に何が起こるか明確
スーパークラスの変更によって悩まされることは一般的にない
2.合理的
（コンポーズされた）オブジェクトは、パーツとインターフェースを介して関わる
新しい種類の部品を追加するときは、そのインターフェースを実装したオブジェクトを差し込むだけ。
既存のコードを変更せずにすむ
3.利用性が高い
部品の入れ替え可能

＠コンポジションのコスト
「見通しが良い」：多くのパーツに依存するため、個々のパーツは見通しの良いものであっても、全体はそうでないかもしれない
「合理的」　　　：どのメッセージを誰に委譲するか、各々のパーツが知っている必要がある。同一の委譲コードがいくつものパーツに散らばってしまうことがある。
→組み立て方のルールを規定するには優れるが、パーツがほぼ同一の場合はあまり助けにならない