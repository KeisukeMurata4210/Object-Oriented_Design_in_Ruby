クラスによる継承：
「コード構成のテクニック」
＝「オブジェクトを階層構造に構成するコストを払う代わりに、メッセージの委譲は無料で手に入れられる」

コンポジションは、そのコストと利点を逆転させたもの。
階層構造に落とし込まず、オブジェクトは独立して存在する。
その代わり、オブジェクトはお互いに知識を持ち、明示的にメッセージを委譲する。

一般的には、コンポジション＞継承
継承の方が良い、とはっきり言えないときはコンポジションにする。
なぜなら、継承が生み出す依存はコンポジションのそれよりはるかに大きいから。


＜継承＞
＠継承の利点
目指すべきコードのあり方
1.見通しが良いこと
2.合理的であること
3.利用性が高いこと
4.模範的であること
継承が正しく使われるなら、2,3,4で優れたコードを作れる

2.合理的であること
階層の上で定義されたメソッドは広範囲で使える。
→広範囲にわたる振る舞いの変更を、ほんの一部分の修正で成し遂げられる

3.利用性が高いこと
継承を使ったコードは「オープン・クローズド（Open-Closed）」=拡張には開いていて、修正には閉じている
サブクラスを作って新しい変種を作る上で、既存コードの変更がいらない

4.模範的であること
抽象クラス、具象クラスのパターンを踏襲してサブクラスを作る。
→階層構造そのものが、拡張するコードを書くためのガイドになる

＠継承のコスト
